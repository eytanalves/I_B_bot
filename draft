from ibapi.wrapper import EWrapper
from ibapi.client import EClient
from ibapi.contract import Contract
import threading
import time
import math


class IBapi(EWrapper, EClient):
    def __init__(self):
        EClient.__init__(self, self)
        self.underlying_price = None


    def tickPrice(self, reqId, tickType, price, attrib):
        super().tickPrice(reqId, tickType, price, attrib)
        if tickType == 4 and reqId == 1003:
            self.underlying_price = price


    def error(self, id, errorCode, errorMsg):
        print(errorCode)
        print(errorMsg)


class MarketDataOptions():
    def __init__(self, symbol, secType, exchange, currency, expiry, strike=None, right=None, multiplier=None):
        self.contract = Contract()
        self.contract.symbol = symbol
        self.contract.secType = secType
        self.contract.exchange = exchange
        self.contract.currency = currency
        self.contract.lastTradeDateOrContractMonth = expiry
        self.contract.strike = strike
        self.contract.right = right
        self.contract.multiplier = multiplier


class MarketDataUnderlying():
    def __init__(self, symbol, secType, exchange, currency, expiry):
        self.contract = Contract()
        self.contract.symbol = symbol
        self.contract.secType = secType
        self.contract.exchange = exchange
        self.contract.currency = currency
        self.contract.lastTradeDateOrContractMonth = expiry


class Bot():
    def __init__(self):
        self.ib = IBapi()
        self.ib.connect(host="127.0.0.1", port=7496, clientId=1)
        self.market_data = []
        self.req_count = 1
        self.req_market_data()
        self.ib_thread = threading.Thread(target=self.run_loop, daemon=True)
        self.ib_thread.start()
        time.sleep(1)

    def req_market_data(self):
        self.market_data.append(MarketDataUnderlying("MES", "FUT", "CME", "USD", "202306"))
        self.ib.reqMktData(1003, self.market_data[0].contract, "", False, False, [])
        self.req_count += 1

        underlying_price = None
        while underlying_price is None:
            underlying_price = self.ib.underlying_price
            time.sleep(1)

        call_strike = round_up_to_5(underlying_price)
        put_strike = round_down_to_5(underlying_price)

        self.market_data.append(MarketDataOptions("MES", "FOP", "CME", "USD", "20230314", call_strike, "C", 5))
        self.market_data.append(MarketDataOptions("MES", "FOP", "CME", "USD", "20230314", put_strike , "P", 5))
        
        for data in self.market_data[1:]:
            self.ib.reqMktData(self.req_count, data.contract, "", False, False, [])
            self.req_count += 1

    def run_loop(self):
        self.ib.run()


def round_up_to_5(x):
    return math.ceil(x / 5) * 5


def round_down_to_5(x):
    return math.floor(x / 5) * 5


bot = Bot()
