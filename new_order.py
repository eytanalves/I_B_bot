from data_manager import Botfrom ibapi.order import Orderimport timeclass EntryOrder(Order):    def __init__(self):        super().__init__()        self.orderType = "BOX TOP"        self.action = "BUY"        self.totalQuantity = 1        self.eTradeOnly = False        self.firmQuoteOnly = Falseclass ExitOrder(Order):    def __init__(self):        super().__init__()        self.orderType = "BOX TOP"        self.action = "SELL"        self.totalQuantity = 1        self.eTradeOnly = False        self.firmQuoteOnly = Falsebot = Bot()CALL_SUN_ID = 0PUT_SUN_ID = 0def strategy():    global CALL_SUN_ID, PUT_SUN_ID    entry_order = EntryOrder()    exit_order = ExitOrder()    CALL_ORDER_ID = bot.ib.return_next_valid_id()    print(f"CALL_ORDER_ID : {CALL_ORDER_ID}")    bot.ib.placeOrder(CALL_ORDER_ID, bot.call_contract.contract, entry_order)    print("CALL ORDER WAS PLACED")    PUT_ORDER_ID = CALL_ORDER_ID + 1    print(f"PUT_ORDER_ID : {PUT_ORDER_ID}")    bot.ib.placeOrder(PUT_ORDER_ID, bot.put_contract.contract, entry_order)    print("PUT ORDER WAS PLACED")    call_count = 0    put_count = 0    def place_exit_order(contract, order_id, order):        print(f"EXIT order ID {order_id}")        bot.ib.placeOrder(order_id, contract, order)        print("EXIT ORDER WAS PLACED")    while True:        c_is_true = bot.ib.is_call_stl_triggered()        p_is_true = bot.ib.is_put_stl_triggered()        if c_is_true and not call_count:            CALL_SUN_ID = PUT_ORDER_ID + 1 if not put_count else PUT_SUN_ID + 1            place_exit_order(bot.call_contract.contract, CALL_SUN_ID, exit_order)            call_count = 1        if p_is_true and not put_count:            PUT_SUN_ID = PUT_ORDER_ID + 1 if not call_count else CALL_SUN_ID + 1            place_exit_order(bot.put_contract.contract, PUT_SUN_ID, exit_order)            put_count = 1        if c_is_true and p_is_true:            breakstrategy()